#include "bigint/bigint.hpp"

#include <benchmark/benchmark.h>

using namespace BI;

static BigInt const a((111_bi).pow(1099));
static BigInt const b((99_bi).pow(981));
static BigInt const m((50_bi).pow(373));

static std::string const x_str =
  "14436398103023993581872158055356046222736813173049950237152189835927741263368444339557796099951483218626350775392349"
  "36099839069640354838908822949754607102595484483665554336330873670280145957060848204114727689019737317631654533398760"
  "33501667326669405410887510209485052808390770847824507387540487510427378618598955279042695294230481690627998568796746"
  "57081867421702482155577706997846637657172787910885274791361197324035470726030537721600077521700908183734799291550391"
  "52475288012083117533120311447205245020151554488762674267665145893606991726116005852242096036211684537898043901552260"
  "81244531283727055029835161913291967983864256982569176953460682610446841216844604917853498950514264863845465228098945"
  "36562406781222229325333549784492050759313105671333752775293214277968418636042850570794875218091304359809236543691268"
  "86765347102119402019122780592250109168680183102533349312337269433937934049068699737216633134729930634357253580588165"
  "78416533940563615369017638294264315062127425023399160959936452236733638084858380734625750134369752008901500758702052"
  "80695101192179373211955224787622970848463303381523039321351563994581061537092034651855940896910207927783238957594165"
  "18520728068984861275235823800792140803542784892195934805729498829121573655557683471627197990378807992319283928443661"
  "16694157281403827732872244255109697163065652440786153316016986302564127580861618653605431285414629537213781395850059"
  "27097698122819393993766488424675862761924281549260881184585815158296867686072119254172562613504706047265849174786993"
  "20357946908978943083221465723788808539716099005930501078447217920442420579836697775262208298623483759414003574190930"
  "16751218142626659058032282076234140035227255285507180163569517530443476076986379539440446428528030586053137862726197"
  "51597850437167693999681050394551890855401489832015524797338723439876340435211915817316442109384538339193941062973850"
  "60669530180366240792854301811765039154958391992411012468036987501969782097898402981236792728962866870169133159141958"
  "31889124634845301701148325796861479047574527270271771652112495180928265004950721826197180676607161987752392875213364"
  "40941584480340602155625192690446335403229976175774244322226928026889216113034223878396958665180821825078905492790069"
  "38749101522016727";

static std::string const x_str_hex =
  "0X94107FCABD2ACF0B3835DA322BA40E514135129E2889A0B5F663BD56685F7C5EE6E112E9A5F986A8949E5259FD501421B9DD4B79E9610BBEC1"
  "BD636BAA98273F5B1F50DE2CB76AA8FC14481362F75665CBA3C5ACC407C624A91F177C7CEE1A828D6BBBE02DC33FAB61ED9C09836B8F803C1E6D"
  "02C7EF4FC467B47C1258C152684FCBFA12C3AB8DB3343C7F7E2D358C4FE9E46E100DB35F54607731A03D14B3FB5837A4D6EFB01B332C9B8114C9"
  "A5303B11D80C4B8F1C2761497ADA3005A4E8AFB95F38BDF114C3B0D3BD8884805D01B896B34DF2B8963A3E6B4A629ADE8357888C45442BCCE665"
  "DF7A5008A99163FB1AA5EBA92ED8AC3A123266691463F52E69AFE13F5DE9649B86F7E80D65F0FAB7A5F22F50525B09430A6F74150865C0D93CA7"
  "7C4ED247BD385D4FCFA28354A5B659C3F6E89B601179A7CF664095DF23B012CA47DD4369DA89562988CBC20D3211EA51C1EDE5E5AC7F35CAED38"
  "7A7F18981C9F9402ED6C9DBD822376A695DE5FDDE8ACE462A196C77C9F6B6434EBFE7BB9155C362E734DF5E913E8DC8DC256CDC83413634CCFA2"
  "62251CE389D76F971CFF00668EA90610192B1CDD448247EADDA37CF90BFFF8DC0A8704E18C5E7BD6DB71FC8D9701EA1FC0C7F755A587763D8501"
  "93B9801445BEBC8BC3BF7345D7C5A65F178A2113EC4AA9674D6EF618C37E39E79B3115AD58FA1629EE1CD082A69EA9E7246945D442BE6F25515E"
  "25F7B768333B7009590CA8A3D26375AB7671F8B89E5CDEBCC8752F14735F0A71A2942E099ADAA800C820DF9AB8D377E938428EF4416A2061F643"
  "FB2D0E4293067B5CC4B949AB3A67E72D6F3D1AD7C6829D337D53438950CD07E873C09661CA72812F8196911AA3B1E18A3DA5C066BA0B059413C7"
  "7C0EE70DD7D7AD2F8BC0428A9D1BB02984ECFA746A06C70AADDE3CCBE286A7A3864D8D7AD86BB96861DB6EA31FAD94FB38B534830146C87664BB"
  "5CC5391F7872A5CDE8915F4E363322E28C5D84AD415B037D8BFFE679EDBEB9D347235BBF97826F5112B4211258A699A681C2864978FDF9601745"
  "AC708AAF2EDF03BFB58E9C703A54EE882F5EFF35509E0118EED3C7809829F9D2B4981BC960E4CC264D563C98A91825F869174CCB96ACCE28DB54"
  "0883C102EE6EA1F16F3C32E652F66723B8AF83C0E76356282AE32FC9DCEAA61D7D74E4770B8E12556B7FE7B516C23026853246FD0664BA24F5F5"
  "6593CBE4DD27C9DC8FCBD41B91A8DAFD92F772FB5EDFEBAE3D7FF62471D3A7F2C48C0C3D6EDC143A81170A62829E179DB2AB27D9D7";

static void BM_BigInt_DefaultConstructor(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_DefaultConstructor);

static void BM_BigInt_IntegralConstructor(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c(0x58911895890ULL);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_IntegralConstructor);

static void BM_BigInt_StringConstructor(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c(x_str);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_StringConstructor);

static void BM_BigInt_StringConstructorHex(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c(x_str_hex);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_StringConstructorHex);

static void BM_BigInt_CopyConstructor(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_CopyConstructor);

static BigInt const temp(a);

static void BM_BigInt_MoveConstructor(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = std::move(temp);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_MoveConstructor);

static void BM_BigInt_abs(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a.abs();
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_abs);

static BigInt const n(235789783);

static void BM_BigInt_to_Integral(benchmark::State& state)
{
    for (auto _ : state)
    {
        int c = static_cast<int>(n);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_to_Integral);

static void BM_BigInt_to_String(benchmark::State& state)
{
    for (auto _ : state)
    {
        std::string c = std::format("{}", a);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_to_String);

static void BM_BigInt_to_HexString(benchmark::State& state)
{
    for (auto _ : state)
    {
        std::string c = std::format("{:X}", a);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_to_HexString);

static void BM_BigInt_UnaryPlus(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = +a;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_UnaryPlus);

static void BM_BigInt_UnaryMinus(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = -a;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_UnaryMinus);

static void BM_BigInt_Comparison(benchmark::State& state)
{
    for (auto _ : state)
    {
        bool c = a < b;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Comparison);

static void BM_BigInt_Addition(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a + b;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Addition);

static void BM_BigInt_Subtraction(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a - b;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Subtraction);

static void BM_BigInt_BitsShiftLeft(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a << 512357;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_BitsShiftLeft);

static void BM_BigInt_BitsShiftRight(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a >> 247;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_BitsShiftRight);

static void BM_BigInt_Multiplication(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a * b;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Multiplication);

static void BM_BigInt_Division(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a / m;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Division);

static void BM_BigInt_Modulus(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = a % m;
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Modulus);

static void BM_BigInt_Power(benchmark::State& state)
{
    for (auto _ : state)
    {
        BigInt c = m.pow(100);
        benchmark::DoNotOptimize(c);
    }
}
BENCHMARK(BM_BigInt_Power);

BENCHMARK_MAIN();
